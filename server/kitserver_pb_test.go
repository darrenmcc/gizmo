// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kitserver_test.proto

/*
Package kit_test is a generated protocol buffer package.

It is generated from these files:
	kitserver_test.proto

It has these top-level messages:
	GetCatNameRequest
	Cat
*/
package kit_test

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	_ "google.golang.org/genproto/googleapis/api/annotations"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetCatNameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetCatNameRequest) Reset()                    { *m = GetCatNameRequest{} }
func (m *GetCatNameRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCatNameRequest) ProtoMessage()               {}
func (*GetCatNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetCatNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Cat struct {
	Age   int32  `protobuf:"varint,3,opt,name=Age" json:"Age,omitempty"`
	Breed string `protobuf:"bytes,1,opt,name=Breed" json:"Breed,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *Cat) Reset()                    { *m = Cat{} }
func (m *Cat) String() string            { return proto.CompactTextString(m) }
func (*Cat) ProtoMessage()               {}
func (*Cat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Cat) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *Cat) GetBreed() string {
	if m != nil {
		return m.Breed
	}
	return ""
}

func (m *Cat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*GetCatNameRequest)(nil), "kit_test.GetCatNameRequest")
	proto.RegisterType((*Cat)(nil), "kit_test.Cat")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KitTestService service

type KitTestServiceClient interface {
	GetCatName(ctx context.Context, in *GetCatNameRequest, opts ...grpc.CallOption) (*Cat, error)
}

type kitTestServiceClient struct {
	cc *grpc.ClientConn
}

func NewKitTestServiceClient(cc *grpc.ClientConn) KitTestServiceClient {
	return &kitTestServiceClient{cc}
}

func (c *kitTestServiceClient) GetCatName(ctx context.Context, in *GetCatNameRequest, opts ...grpc.CallOption) (*Cat, error) {
	out := new(Cat)
	err := grpc.Invoke(ctx, "/kit_test.Kit_testService/GetCatName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KitTestService service

type KitTestServiceServer interface {
	GetCatName(context.Context, *GetCatNameRequest) (*Cat, error)
}

func RegisterKitTestServiceServer(s *grpc.Server, srv KitTestServiceServer) {
	s.RegisterService(&_KitTestService_serviceDesc, srv)
}

func _KitTestService_GetCatName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCatNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitTestServiceServer).GetCatName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kit_test.Kit_testService/GetCatName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitTestServiceServer).GetCatName(ctx, req.(*GetCatNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KitTestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kit_test.Kit_testService",
	HandlerType: (*KitTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCatName",
			Handler:    _KitTestService_GetCatName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kitserver_test.proto",
}

func init() { proto.RegisterFile("kitserver_test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0xce, 0x2c, 0x29,
	0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0x8a, 0x2f, 0x49, 0x2d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0xc8, 0xce, 0x2c, 0x01, 0xf3, 0xa5, 0x64, 0xd2, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5,
	0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0x12, 0x4b, 0x32, 0xf3, 0xf3, 0x8a, 0x21,
	0xea, 0x94, 0xd4, 0xb9, 0x04, 0xdd, 0x53, 0x4b, 0x9c, 0x13, 0x4b, 0xfc, 0x12, 0x73, 0x53, 0x83,
	0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x18,
	0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x47, 0x2e, 0x66, 0xe7, 0xc4, 0x12, 0x21, 0x01,
	0x2e, 0x66, 0xc7, 0xf4, 0x54, 0x09, 0x66, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x10, 0x53, 0x48, 0x84,
	0x8b, 0xd5, 0xa9, 0x28, 0x35, 0x35, 0x05, 0xaa, 0x1a, 0xc2, 0x01, 0x19, 0x01, 0x32, 0x51, 0x82,
	0x09, 0x62, 0x04, 0x88, 0x6d, 0x94, 0xc2, 0xc5, 0xef, 0x0d, 0x75, 0x55, 0x70, 0x6a, 0x51, 0x59,
	0x66, 0x72, 0xaa, 0x50, 0x20, 0x17, 0x17, 0xc2, 0x7a, 0x21, 0x69, 0x3d, 0x98, 0xab, 0xf5, 0x30,
	0x1c, 0x25, 0xc5, 0x8b, 0x90, 0x74, 0x4e, 0x2c, 0x51, 0x12, 0x6f, 0xba, 0xfc, 0x64, 0x32, 0x93,
	0xa0, 0x10, 0xbf, 0x7e, 0x71, 0x59, 0xb2, 0x7e, 0x72, 0x62, 0x89, 0x7e, 0x35, 0xc8, 0x9d, 0xb5,
	0x49, 0x6c, 0x60, 0x8f, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xdb, 0x7d, 0x9c, 0x18,
	0x01, 0x00, 0x00,
}
